#
# ps9pr1.py  (Problem Set 9, Problem 1)
#
# A Connect-Four Board class 
#  
# Partner Name:Fahim Uddin
# Partner Email: fahuddin@bu.edu
# 
class Board:
    def __init__(self, height, width):
        """constructs a new Board object by initializing the following three attributes:"""
        self.x = 0
        self.y = 0
        self.height = height
        self.width = width
        self.slots = [[' '] * self.width for row in range(self.height)]
    def __repr__(self):
        """ Returns a string representation for a Board object."""
        s = ''         # begin with an empty string
    
        # add one row of slots at a time
        for row in range(self.height):
            s += '|'   # one vertical bar at the start of the row
    
            for col in range(self.width):
                s += self.slots[row][col] + '|'
    
            s += '\n'  # newline at the end of the row
    
        # Add code here for the hyphens at the bottom of the board
        # and the numbers underneath it.
        for row in range(((self.height+1)*2)+1):
            s += '-'
        s += '\n'
        for col in range((self.width)):
            col = col % 10
            s += (' ' + str(col))
        s += '\n'
        return s
    def add_checker(self, checker, col):
        """ adds the specified checker to column col """
        row = 0
        while self.slots[row][col] == ' ':
            row += 1
            if row == self.height-1:
                break
        while self.slots[row][col] != ' ':
            row -= 1
        self.slots[row][col] = checker
    def reset(self):
        """resets board"""
        for row in range(self.height):
            for col in range(self.width):
                self.slots[row][col] = " "

#    def reset(self):
#        """resets board"""
#        self = Board(self.height,self.width)
    def add_checkers(self, colnums):
        """ takes in a string of column numbers and places alternating
        checkers in those columns of the called Board object, 
        starting with 'X'. 
        """
        checker = 'X'   # start by playing 'X'
    
        for col_str in colnums:
            col = int(col_str)
            if 0 <= col < self.width:
                self.add_checker(checker, col)
    
            # switch to the other checker
            if checker == 'X':
                checker = 'O'
            else:
                checker = 'X'
    def can_add_to(self,col):
        """ returns True if it is valid to place a checker in the column col on the calling Board object. Otherwise, it should return False."""
        if col < 0:
            return False
        elif col > self.width-1:
            return False
        elif self.slots[0][col] != ' ':
            return False
        else:
            return True
        
    def is_full(self):
        """Checks if Full with True/False"""
        for col in range(self.width):
            if self.can_add_to(col):
                return False
        return True
    def remove_checker(self,col):
        """removes top checker"""
        for row in range(self.height):
            if self.slots[row][col] != ' ':
                self.slots[row][col] = ' '
                break
    def is_horizontal_win(self, checker):
        """ Checks for a horizontal win for the specified checker.
        """
        for row in range(self.height):
            for col in range(self.width - 3):
                # Check if the next four columns in this row
                # contain the specified checker.
                if self.slots[row][col] == checker and \
                   self.slots[row][col + 1] == checker and \
                   self.slots[row][col + 2] == checker and \
                   self.slots[row][col + 3] == checker:
                    return True
    
        # if we make it here, there were no horizontal wins
        return False
    def is_vertical_win(self, checker):
        """checks for vert win"""
        for row in range(self.height - 3):
            for col in range(self.width):
                if self.slots[row][col] == checker and \
                   self.slots[row+1][col] == checker and \
                   self.slots[row+2][col] == checker and \
                   self.slots[row+3][col] == checker:
                    return True
        # if we make it here, there were no vert wins
        return False
    def is_down_diagonal_win(self, checker):
        """checks for down diagonal win"""
        for row in range(self.height-3):
            for col in range(self.width-3):
                if self.slots[row][col] == checker and \
                   self.slots[row+1][col+1] == checker and \
                   self.slots[row+2][col+2] == checker and \
                   self.slots[row+3][col+3] == checker:
                    return True
        return False
    def is_up_diagonal_win(self, checker):
        """checks for up diagonal win"""
        for row in range(3,self.height):
            for col in range(self.width-3):
                if self.slots[row][col] == checker and \
                   self.slots[row-1][col+1] == checker and \
                   self.slots[row-2][col+2] == checker and \
                   self.slots[row-3][col+3] == checker:
                    return True
        return False
    def is_win_for(self, checker):
        """returns True if there are four consecutive slots containing checker on the board, otherwise its False"""
        assert(checker == 'X' or checker == 'O')
        if self.is_horizontal_win(checker) == True:
            return True
        elif self.is_vertical_win(checker) == True:
            return True
        elif self.is_down_diagonal_win(checker) == True:
            return True
        elif self.is_up_diagonal_win(checker) == True:
            return True
        else:
            return False
    