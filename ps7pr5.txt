#
# ps7pr5.py  (Problem Set 7, Problem 5)
#
# Images as 2-D lists  
#
# Computer Science 111
# 

from hmcpng import *

def create_uniform_image(height, width, pixel):
    """ creates and returns a 2-D list of pixels with height rows and
        width columns in which all of the pixels have the RGB values
        given by pixel
        inputs: height and width are non-negative integers
                pixel is a 1-D list of RBG values of the form [R,G,B],
                     where each element is an integer between 0 and 255.
    """
    pixels = []

    for r in range(height):
        row = [pixel] * width
        pixels += [row]

    return pixels

def blank_image(height, width):
    """ creates and returns a 2-D list of pixels with height rows and
        width columns in which all of the pixels are green.
        inputs: height and width are non-negative integers
    """
    all_green = create_uniform_image(height, width, [0, 255, 0])
    return all_green

def brightness(pixel):
    """ takes a pixel (an [R, G, B] list) and returns a value
        between 0 and 255 that represents the brightness of that pixel.
    """
    red = pixel[0]
    green = pixel[1]
    blue = pixel[2]
    return (21*red + 72*green + 7*blue) // 100

## put your functions below
def grayscale(pixels):
    """takes the 2-D list pixels containing pixels for an image, and that creates and returns a new 2-D list of pixels for an image that is a grayscale version of the original image."""
    pokebowl = blank_image(len(pixels),len(pixels[0]))
    for s in range(len(pixels)):
        for x in range(len(pixels[0])):
            bingo = brightness(pixels[s][x])
            pokebowl[s][x] = [bingo, bingo, bingo]
    return pokebowl
def fold_diag(pixels):
    """adapt from new image to get big fold"""
    pokebowl = blank_image(len(pixels),len(pixels[0]))
    for s in range(len(pixels)):
        for x in range(len(pixels[0])):
            pokebowl[s][x] = pixels[s][x]
            if s > x:
                pokebowl[s][x] = [255,255,255]
    return pokebowl
def mirror_horiz(pixels):
    """adapt from the new image, for mirror image"""
    pokebowl = blank_image(len(pixels),len(pixels[0]))
    for s in range(len(pixels)):
        for x in range((len(pixels[0]))//2):
            pokebowl[s][x] = pixels[s][x]
            pokebowl[s][((len(pixels[0]))-1)-x] = pixels[s][x]
    return pokebowl
def extract(pixels, rmin, rmax, cmin, cmax):
    pokebowl = blank_image(rmax-rmin,cmax-cmin)
    for s in range(len(pokebowl)):
        for x in range(len(pokebowl[0])):
            pokebowl[s][x] = pixels[rmin+s][cmin+x]
    return pokebowl