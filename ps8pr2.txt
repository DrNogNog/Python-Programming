#
# ps8pr2.py  (Problem Set 8, Problem 2)
#
# A class to represent calendar dates       
#

class Date:
    """ A class that stores and manipulates dates that are
        represented by a day, month, and year.
    """

    # The constructor for the Date class.
    def __init__(self, init_month, init_day, init_year):
        """ constructor that initializes the three attributes  
            in every Date object (month, day, and year)
        """
        # add the necessary assignment statements below
        self.month = init_month
        self.day = init_day
        self.year = init_year

    # The function for the Date class that returns a Date
    # object in a string representation.
    def __repr__(self):
        """ This method returns a string representation for the
            object of type Date that it is called on (named self).

            ** Note that this _can_ be called explicitly, but
              it more often is used implicitly via printing or evaluating.
        """
        s = '%02d/%02d/%04d' % (self.month, self.day, self.year)
        return s

    def is_leap_year(self):
        """ Returns True if the called object is
            in a leap year. Otherwise, returns False.
        """
        if self.year % 400 == 0:
            return True
        elif self.year % 100 == 0:
            return False
        elif self.year % 4 == 0:
            return True
        return False

    def copy(self):
        """ Returns a new object with the same month, day, year
            as the called object (self).
        """
        new_date = Date(self.month, self.day, self.year)
        return new_date

#### Put your code for problem 2 below. ####

    def advance_one(self):
        """advances one day"""
        days_in_month = [0, 31, 28, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31]
        if self.is_leap_year() == True:
            self.day = (self.day % 29) + 1
            if self.day == 1:
                self.month = self.month + 1
        elif self.month == 12 and self.day == 31:
            self.month = 1
            self.day = 1
            self.year = self.year + 1
        elif self.day == days_in_month[self.month]:
            self.day = 1
            self.month = self.month + 1
        else:
            self.day = self.day+ 1
            
    def advance_n(self, n):
        """advances multiple days"""
        print(self)
        while n > 0:
            n = n - 1
            self.advance_one()
            print(self)
    def __eq__(self, other):
        """sees if self and other are equal"""
        if self.day == other.day and self.month == other.month and self.year == other.year:
            return True
        else:
            return False
    def is_before(self, other):
        """checks if is before"""
        if self.year < other.year:
            return True
        if self.month < other.month and self.year == other.year:
            return True
        if self.day < other.day and self.month == other.month and self.year == other.year:
            return True
        return False
    def is_after(self, other):
        """checks if is after"""
        return other.is_before(self)   
    
    def days_between(self, other):
        """finds days between and returns positive or negative days"""
        days = 0
        b = self.copy()
        c = other.copy()
        if b == c:
            return days 
        elif b.is_before(c) == True:
            while b != c:
                b.advance_one()
                days += -1
        elif b.is_before(c) == False:
            while b != c:
                c.advance_one()
                days += 1
        return days
    def day_name(self):
        """compares dates finds week"""
        origin = Date(11,11,2019)
        day_names = ['Monday', 'Tuesday', 'Wednesday', 'Thursday', 'Friday', 'Saturday', 'Sunday']
        if (self.days_between(origin)) % 7 == 0:
            return day_names[0]
        elif (self.days_between(origin) % 7) == 1:
            return day_names[1]
        elif (self.days_between(origin) % 7) == 2:
            return day_names[2]
        elif (self.days_between(origin) % 7) == 3:
            return day_names[3]
        elif (self.days_between(origin) % 7) == 4:
            return day_names[4]
        elif (self.days_between(origin) % 7) == 5:
            return day_names[5]
        elif (self.days_between(origin) % 7) == 6:
            return day_names[6]
